// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:DbAthlete.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// DbAthlete TABLE
class TableDbAthlete extends SqfEntityTableBase {
  TableDbAthlete() {
    // declare properties of EntityTable
    tableName = 'athletes';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('firstName', DbType.text),
      SqfEntityFieldBase('lastName', DbType.text),
      SqfEntityFieldBase('stravaUsername', DbType.text),
      SqfEntityFieldBase('photoPath', DbType.text),
      SqfEntityFieldBase('stravaId', DbType.integer),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableDbAthlete();
  }
}

// DbActivity TABLE
class TableDbActivity extends SqfEntityTableBase {
  TableDbActivity() {
    // declare properties of EntityTable
    tableName = 'activities';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('state', DbType.text, defaultValue: 'new'),
      SqfEntityFieldBase('path', DbType.text),
      SqfEntityFieldBase('stravaId', DbType.integer),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('movingTime', DbType.integer),
      SqfEntityFieldBase('type', DbType.text),
      SqfEntityFieldBase('startTime', DbType.text),
      SqfEntityFieldBase('distance', DbType.integer),
      SqfEntityFieldRelationshipBase(
          TableDbAthlete.getInstance, DeleteRule.CASCADE,
          defaultValue: 0, fieldName: 'athletesId'),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableDbActivity();
  }
}
// END TABLES

// BEGIN SEQUENCES
// END SEQUENCES

// BEGIN DATABASE MODEL
class DbEncrateia extends SqfEntityModelProvider {
  DbEncrateia() {
    databaseName = encrateia.databaseName;
    databaseTables = [
      TableDbAthlete.getInstance,
      TableDbActivity.getInstance,
    ];

    bundledDatabasePath = encrateia
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = Map<String, dynamic>();

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region DbAthlete
class DbAthlete {
  DbAthlete(
      {this.id,
      this.firstName,
      this.lastName,
      this.stravaUsername,
      this.photoPath,
      this.stravaId}) {
    _setDefaultValues();
  }
  DbAthlete.withFields(this.firstName, this.lastName, this.stravaUsername,
      this.photoPath, this.stravaId) {
    _setDefaultValues();
  }
  DbAthlete.withId(this.id, this.firstName, this.lastName, this.stravaUsername,
      this.photoPath, this.stravaId) {
    _setDefaultValues();
  }
  DbAthlete.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    firstName = o['firstName'] as String;
    lastName = o['lastName'] as String;
    stravaUsername = o['stravaUsername'] as String;
    photoPath = o['photoPath'] as String;
    stravaId = o['stravaId'] as int;
  }
  // FIELDS (DbAthlete)
  int id;
  String firstName;
  String lastName;
  String stravaUsername;
  String photoPath;
  int stravaId;

  BoolResult saveResult;
  // end FIELDS (DbAthlete)

// COLLECTIONS (DbAthlete)
  /// get DbActivity(s) filtered by athletesId=id
  DbActivityFilterBuilder getDbActivities(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DbActivity()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .athletesId
        .equals(id)
        .and;
  }
// END COLLECTIONS (DbAthlete)

  static const bool _softDeleteActivated = false;
  DbAthleteManager __mnDbAthlete;

  DbAthleteManager get _mnDbAthlete {
    return __mnDbAthlete = __mnDbAthlete ?? DbAthleteManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (firstName != null) {
      map['firstName'] = firstName;
    }

    if (lastName != null) {
      map['lastName'] = lastName;
    }

    if (stravaUsername != null) {
      map['stravaUsername'] = stravaUsername;
    }

    if (photoPath != null) {
      map['photoPath'] = photoPath;
    }

    if (stravaId != null) {
      map['stravaId'] = stravaId;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (firstName != null) {
      map['firstName'] = firstName;
    }

    if (lastName != null) {
      map['lastName'] = lastName;
    }

    if (stravaUsername != null) {
      map['stravaUsername'] = stravaUsername;
    }

    if (photoPath != null) {
      map['photoPath'] = photoPath;
    }

    if (stravaId != null) {
      map['stravaId'] = stravaId;
    }

// COLLECTIONS (DbAthlete)
    if (!forQuery) {
      map['DbActivities'] = await getDbActivities().toMapList();
    }
// END COLLECTIONS (DbAthlete)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [id, firstName, lastName, stravaUsername, photoPath, stravaId];
  }

  static Future<List<DbAthlete>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR DbAthlete.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<DbAthlete>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<DbAthlete>();
    try {
      objList = list
          .map((dbathlete) =>
              DbAthlete.fromMap(dbathlete as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR DbAthlete.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<DbAthlete>> fromObjectList(Future<List<dynamic>> o) async {
    final data = await o;
    return await DbAthlete.fromMapList(data);
  }

  static Future<List<DbAthlete>> fromMapList(List<dynamic> data) async {
    final List<DbAthlete> objList = List<DbAthlete>();
    for (final Map map in data as List<Map>) {
      final obj = DbAthlete.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns DbAthlete by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns DbAthlete if exist, otherwise returns null
  Future<DbAthlete> getById(int id) async {
    if (id == null) {
      return null;
    }
    DbAthlete obj;
    final data = await _mnDbAthlete.getById(id);
    if (data.length != 0) {
      obj = DbAthlete.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnDbAthlete.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs DbAthlete. Returns a new Primary Key value of DbAthlete

  /// <returns>Returns a new Primary Key value of DbAthlete
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<DbAthlete> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<DbAthlete> dbathletes) async {
    final results = _mnDbAthlete.saveAll(
        'INSERT OR REPLACE INTO athletes (id,  firstName, lastName, stravaUsername, photoPath, stravaId)  VALUES (?,?,?,?,?,?)',
        dbathletes);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnDbAthlete.rawInsert(
          'INSERT OR REPLACE INTO athletes (id,  firstName, lastName, stravaUsername, photoPath, stravaId)  VALUES (?,?,?,?,?,?)',
          [id, firstName, lastName, stravaUsername, photoPath, stravaId]);
      saveResult = BoolResult(
          success: true,
          successMessage: 'DbAthlete id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'DbAthlete Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<DbAthlete>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<DbAthlete> dbathletes) async {
    final results = await _mnDbAthlete.rawInsertAll(
        'INSERT OR REPLACE INTO athletes (id,  firstName, lastName, stravaUsername, photoPath, stravaId)  VALUES (?,?,?,?,?,?)',
        dbathletes);
    return results;
  }

  /// Deletes DbAthlete

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete DbAthlete invoked (id=$id)');
    var result = BoolResult();
    {
      result =
          await DbActivity().select().athletesId.equals(id).delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnDbAthlete
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnDbAthlete.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private DbAthleteFilterBuilder _Select;
  DbAthleteFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DbAthleteFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  DbAthleteFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DbAthleteFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion dbathlete

// region DbAthleteField
class DbAthleteField extends SearchCriteria {
  DbAthleteField(this.dbathleteFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  DbAthleteFilterBuilder dbathleteFB;

  DbAthleteField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  DbAthleteFilterBuilder equals(var pValue) {
    param.expression = '=';
    dbathleteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbathleteFB.parameters, param, SqlSyntax.EQuals,
            dbathleteFB._addedBlocks)
        : setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.NotEQuals, dbathleteFB._addedBlocks);
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }

  DbAthleteFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    dbathleteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.EQualsOrNull, dbathleteFB._addedBlocks)
        : setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, dbathleteFB._addedBlocks);
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }

  DbAthleteFilterBuilder isNull() {
    dbathleteFB._addedBlocks = setCriteria(
        0,
        dbathleteFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        dbathleteFB._addedBlocks);
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }

  DbAthleteFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      dbathleteFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          dbathleteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          dbathleteFB._addedBlocks);
      _waitingNot = '';
      dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
          dbathleteFB._addedBlocks.retVal;
    }
    return dbathleteFB;
  }

  DbAthleteFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      dbathleteFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          dbathleteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          dbathleteFB._addedBlocks);
      _waitingNot = '';
      dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
          dbathleteFB._addedBlocks.retVal;
      dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
          dbathleteFB._addedBlocks.retVal;
    }
    return dbathleteFB;
  }

  DbAthleteFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      dbathleteFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          dbathleteFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          dbathleteFB._addedBlocks);
      _waitingNot = '';
      dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
          dbathleteFB._addedBlocks.retVal;
    }
    return dbathleteFB;
  }

  DbAthleteFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      dbathleteFB._addedBlocks = setCriteria(
          pFirst,
          dbathleteFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          dbathleteFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        dbathleteFB._addedBlocks = setCriteria(pFirst, dbathleteFB.parameters,
            param, SqlSyntax.LessThan, dbathleteFB._addedBlocks);
      } else {
        dbathleteFB._addedBlocks = setCriteria(pFirst, dbathleteFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, dbathleteFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        dbathleteFB._addedBlocks = setCriteria(pLast, dbathleteFB.parameters,
            param, SqlSyntax.GreaterThan, dbathleteFB._addedBlocks);
      } else {
        dbathleteFB._addedBlocks = setCriteria(pLast, dbathleteFB.parameters,
            param, SqlSyntax.LessThanOrEquals, dbathleteFB._addedBlocks);
      }
    }
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }

  DbAthleteFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    dbathleteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.GreaterThan, dbathleteFB._addedBlocks)
        : setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, dbathleteFB._addedBlocks);
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }

  DbAthleteFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    dbathleteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbathleteFB.parameters, param, SqlSyntax.LessThan,
            dbathleteFB._addedBlocks)
        : setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, dbathleteFB._addedBlocks);
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }

  DbAthleteFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    dbathleteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, dbathleteFB._addedBlocks)
        : setCriteria(pValue, dbathleteFB.parameters, param, SqlSyntax.LessThan,
            dbathleteFB._addedBlocks);
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }

  DbAthleteFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    dbathleteFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.LessThanOrEquals, dbathleteFB._addedBlocks)
        : setCriteria(pValue, dbathleteFB.parameters, param,
            SqlSyntax.GreaterThan, dbathleteFB._addedBlocks);
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }

  DbAthleteFilterBuilder inValues(var pValue) {
    dbathleteFB._addedBlocks = setCriteria(
        pValue,
        dbathleteFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        dbathleteFB._addedBlocks);
    _waitingNot = '';
    dbathleteFB._addedBlocks.needEndBlock[dbathleteFB._blockIndex] =
        dbathleteFB._addedBlocks.retVal;
    return dbathleteFB;
  }
}
// endregion DbAthleteField

// region DbAthleteFilterBuilder
class DbAthleteFilterBuilder extends SearchCriteria {
  DbAthleteFilterBuilder(DbAthlete obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  DbAthlete _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  DbAthleteFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  DbAthleteFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  DbAthleteFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  DbAthleteFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  DbAthleteFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  DbAthleteFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  DbAthleteFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  DbAthleteFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  DbAthleteFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  DbAthleteFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  DbAthleteField setField(DbAthleteField field, String colName, DbType dbtype) {
    return DbAthleteField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  DbAthleteField _id;
  DbAthleteField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  DbAthleteField _firstName;
  DbAthleteField get firstName {
    return _firstName = setField(_firstName, 'firstName', DbType.text);
  }

  DbAthleteField _lastName;
  DbAthleteField get lastName {
    return _lastName = setField(_lastName, 'lastName', DbType.text);
  }

  DbAthleteField _stravaUsername;
  DbAthleteField get stravaUsername {
    return _stravaUsername =
        setField(_stravaUsername, 'stravaUsername', DbType.text);
  }

  DbAthleteField _photoPath;
  DbAthleteField get photoPath {
    return _photoPath = setField(_photoPath, 'photoPath', DbType.text);
  }

  DbAthleteField _stravaId;
  DbAthleteField get stravaId {
    return _stravaId = setField(_stravaId, 'stravaId', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (DbAthlete._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<DbAthlete> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (DbAthlete._softDeleteActivated && !hardDelete) {
      r = await _obj._mnDbAthlete.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnDbAthlete.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from athletes ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnDbAthlete.updateBatch(qparams, values);
  }

  /// This method always returns DbAthleteObj if exist, otherwise returns null
  /// <returns>List<DbAthlete>
  Future<DbAthlete> toSingle([VoidCallback dbathlete(DbAthlete o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnDbAthlete.toList(qparams);
    final data = await objFuture;
    DbAthlete obj;
    if (data.isNotEmpty) {
      obj = DbAthlete.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (dbathlete != null) {
      dbathlete(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback dbathleteCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final dbathletesFuture = await _obj._mnDbAthlete.toList(qparams);
    final int count = dbathletesFuture[0]['CNT'] as int;
    if (dbathleteCount != null) {
      dbathleteCount(count);
    }
    return count;
  }

  /// This method always returns List<DbAthlete>.
  /// <returns>List<DbAthlete>
  Future<List<DbAthlete>> toList(
      [VoidCallback dbathleteList(List<DbAthlete> o)]) async {
    final data = await toMapList();
    final List<DbAthlete> dbathletesData = await DbAthlete.fromMapList(data);
    if (dbathleteList != null) dbathleteList(dbathletesData);
    return dbathletesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnDbAthlete.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<DbAthlete>>
  Future<List<DropdownMenuItem<DbAthlete>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<DbAthlete>> o)]) async {
    _buildParameters();
    final dbathletesFuture = _obj._mnDbAthlete.toList(qparams);

    final data = await dbathletesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<DbAthlete>> items = List()
      ..add(DropdownMenuItem(
        value: DbAthlete(),
        child: Text('Select DbAthlete'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: DbAthlete.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final dbathletesFuture = _obj._mnDbAthlete.toList(qparams);

    final data = await dbathletesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select DbAthlete'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnDbAthlete.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnDbAthlete.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await DbAthlete.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnDbAthlete.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion DbAthleteFilterBuilder

// region DbAthleteFields
class DbAthleteFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fFirstName;
  static TableField get firstName {
    return _fFirstName = _fFirstName ??
        SqlSyntax.setField(_fFirstName, 'firstName', DbType.text);
  }

  static TableField _fLastName;
  static TableField get lastName {
    return _fLastName =
        _fLastName ?? SqlSyntax.setField(_fLastName, 'lastName', DbType.text);
  }

  static TableField _fStravaUsername;
  static TableField get stravaUsername {
    return _fStravaUsername = _fStravaUsername ??
        SqlSyntax.setField(_fStravaUsername, 'stravaUsername', DbType.text);
  }

  static TableField _fPhotoPath;
  static TableField get photoPath {
    return _fPhotoPath = _fPhotoPath ??
        SqlSyntax.setField(_fPhotoPath, 'photoPath', DbType.text);
  }

  static TableField _fStravaId;
  static TableField get stravaId {
    return _fStravaId = _fStravaId ??
        SqlSyntax.setField(_fStravaId, 'stravaId', DbType.integer);
  }
}
// endregion DbAthleteFields

//region DbAthleteManager
class DbAthleteManager extends SqfEntityProvider {
  DbAthleteManager()
      : super(DbEncrateia(), tableName: _tableName, colId: _colId);
  static String _tableName = 'athletes';
  static String _colId = 'id';
}

//endregion DbAthleteManager
// region DbActivity
class DbActivity {
  DbActivity(
      {this.id,
      this.state,
      this.path,
      this.stravaId,
      this.name,
      this.movingTime,
      this.type,
      this.startTime,
      this.distance,
      this.athletesId}) {
    _setDefaultValues();
  }
  DbActivity.withFields(
      this.state,
      this.path,
      this.stravaId,
      this.name,
      this.movingTime,
      this.type,
      this.startTime,
      this.distance,
      this.athletesId) {
    _setDefaultValues();
  }
  DbActivity.withId(
      this.id,
      this.state,
      this.path,
      this.stravaId,
      this.name,
      this.movingTime,
      this.type,
      this.startTime,
      this.distance,
      this.athletesId) {
    _setDefaultValues();
  }
  DbActivity.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    state = o['state'] as String;
    path = o['path'] as String;
    stravaId = o['stravaId'] as int;
    name = o['name'] as String;
    movingTime = o['movingTime'] as int;
    type = o['type'] as String;
    startTime = o['startTime'] as String;
    distance = o['distance'] as int;
    athletesId = o['athletesId'] as int;
  }
  // FIELDS (DbActivity)
  int id;
  String state;
  String path;
  int stravaId;
  String name;
  int movingTime;
  String type;
  String startTime;
  int distance;
  int athletesId;

  BoolResult saveResult;
  // end FIELDS (DbActivity)

// RELATIONSHIPS (DbActivity)
  /// get DbAthlete By AthletesId
  Future<DbAthlete> getDbAthlete([VoidCallback dbathlete(DbAthlete o)]) async {
    final _obj = await DbAthlete().getById(athletesId);
    if (dbathlete != null) {
      dbathlete(_obj);
    }
    return _obj;
  }
  // END RELATIONSHIPS (DbActivity)

  static const bool _softDeleteActivated = false;
  DbActivityManager __mnDbActivity;

  DbActivityManager get _mnDbActivity {
    return __mnDbActivity = __mnDbActivity ?? DbActivityManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (state != null) {
      map['state'] = state;
    }

    if (path != null) {
      map['path'] = path;
    }

    if (stravaId != null) {
      map['stravaId'] = stravaId;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (movingTime != null) {
      map['movingTime'] = movingTime;
    }

    if (type != null) {
      map['type'] = type;
    }

    if (startTime != null) {
      map['startTime'] = startTime;
    }

    if (distance != null) {
      map['distance'] = distance;
    }

    if (athletesId != null) {
      map['athletesId'] = athletesId;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (state != null) {
      map['state'] = state;
    }

    if (path != null) {
      map['path'] = path;
    }

    if (stravaId != null) {
      map['stravaId'] = stravaId;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (movingTime != null) {
      map['movingTime'] = movingTime;
    }

    if (type != null) {
      map['type'] = type;
    }

    if (startTime != null) {
      map['startTime'] = startTime;
    }

    if (distance != null) {
      map['distance'] = distance;
    }

    if (athletesId != null) {
      map['athletesId'] = athletesId;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      state,
      path,
      stravaId,
      name,
      movingTime,
      type,
      startTime,
      distance,
      athletesId
    ];
  }

  static Future<List<DbActivity>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR DbActivity.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<DbActivity>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<DbActivity>();
    try {
      objList = list
          .map((dbactivity) =>
              DbActivity.fromMap(dbactivity as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR DbActivity.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<DbActivity>> fromObjectList(
      Future<List<dynamic>> o) async {
    final data = await o;
    return await DbActivity.fromMapList(data);
  }

  static Future<List<DbActivity>> fromMapList(List<dynamic> data) async {
    final List<DbActivity> objList = List<DbActivity>();
    for (final Map map in data as List<Map>) {
      final obj = DbActivity.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns DbActivity by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns DbActivity if exist, otherwise returns null
  Future<DbActivity> getById(int id) async {
    if (id == null) {
      return null;
    }
    DbActivity obj;
    final data = await _mnDbActivity.getById(id);
    if (data.length != 0) {
      obj = DbActivity.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnDbActivity.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs DbActivity. Returns a new Primary Key value of DbActivity

  /// <returns>Returns a new Primary Key value of DbActivity
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<DbActivity> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<DbActivity> dbactivities) async {
    final results = _mnDbActivity.saveAll(
        'INSERT OR REPLACE INTO activities (id,  state, path, stravaId, name, movingTime, type, startTime, distance, athletesId)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        dbactivities);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnDbActivity.rawInsert(
          'INSERT OR REPLACE INTO activities (id,  state, path, stravaId, name, movingTime, type, startTime, distance, athletesId)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            state,
            path,
            stravaId,
            name,
            movingTime,
            type,
            startTime,
            distance,
            athletesId
          ]);
      saveResult = BoolResult(
          success: true,
          successMessage: 'DbActivity id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'DbActivity Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<DbActivity>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<DbActivity> dbactivities) async {
    final results = await _mnDbActivity.rawInsertAll(
        'INSERT OR REPLACE INTO activities (id,  state, path, stravaId, name, movingTime, type, startTime, distance, athletesId)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        dbactivities);
    return results;
  }

  /// Deletes DbActivity

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete DbActivity invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnDbActivity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnDbActivity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private DbActivityFilterBuilder _Select;
  DbActivityFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DbActivityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  DbActivityFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DbActivityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    state = state ?? 'new';
    athletesId = athletesId ?? 0;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion dbactivity

// region DbActivityField
class DbActivityField extends SearchCriteria {
  DbActivityField(this.dbactivityFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  DbActivityFilterBuilder dbactivityFB;

  DbActivityField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  DbActivityFilterBuilder equals(var pValue) {
    param.expression = '=';
    dbactivityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbactivityFB.parameters, param, SqlSyntax.EQuals,
            dbactivityFB._addedBlocks)
        : setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.NotEQuals, dbactivityFB._addedBlocks);
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }

  DbActivityFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    dbactivityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.EQualsOrNull, dbactivityFB._addedBlocks)
        : setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, dbactivityFB._addedBlocks);
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }

  DbActivityFilterBuilder isNull() {
    dbactivityFB._addedBlocks = setCriteria(
        0,
        dbactivityFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        dbactivityFB._addedBlocks);
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }

  DbActivityFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      dbactivityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          dbactivityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          dbactivityFB._addedBlocks);
      _waitingNot = '';
      dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
          dbactivityFB._addedBlocks.retVal;
    }
    return dbactivityFB;
  }

  DbActivityFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      dbactivityFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          dbactivityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          dbactivityFB._addedBlocks);
      _waitingNot = '';
      dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
          dbactivityFB._addedBlocks.retVal;
      dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
          dbactivityFB._addedBlocks.retVal;
    }
    return dbactivityFB;
  }

  DbActivityFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      dbactivityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          dbactivityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          dbactivityFB._addedBlocks);
      _waitingNot = '';
      dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
          dbactivityFB._addedBlocks.retVal;
    }
    return dbactivityFB;
  }

  DbActivityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      dbactivityFB._addedBlocks = setCriteria(
          pFirst,
          dbactivityFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          dbactivityFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        dbactivityFB._addedBlocks = setCriteria(pFirst, dbactivityFB.parameters,
            param, SqlSyntax.LessThan, dbactivityFB._addedBlocks);
      } else {
        dbactivityFB._addedBlocks = setCriteria(pFirst, dbactivityFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, dbactivityFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        dbactivityFB._addedBlocks = setCriteria(pLast, dbactivityFB.parameters,
            param, SqlSyntax.GreaterThan, dbactivityFB._addedBlocks);
      } else {
        dbactivityFB._addedBlocks = setCriteria(pLast, dbactivityFB.parameters,
            param, SqlSyntax.LessThanOrEquals, dbactivityFB._addedBlocks);
      }
    }
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }

  DbActivityFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    dbactivityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.GreaterThan, dbactivityFB._addedBlocks)
        : setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, dbactivityFB._addedBlocks);
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }

  DbActivityFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    dbactivityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.LessThan, dbactivityFB._addedBlocks)
        : setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, dbactivityFB._addedBlocks);
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }

  DbActivityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    dbactivityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, dbactivityFB._addedBlocks)
        : setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.LessThan, dbactivityFB._addedBlocks);
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }

  DbActivityFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    dbactivityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, dbactivityFB._addedBlocks)
        : setCriteria(pValue, dbactivityFB.parameters, param,
            SqlSyntax.GreaterThan, dbactivityFB._addedBlocks);
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }

  DbActivityFilterBuilder inValues(var pValue) {
    dbactivityFB._addedBlocks = setCriteria(
        pValue,
        dbactivityFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        dbactivityFB._addedBlocks);
    _waitingNot = '';
    dbactivityFB._addedBlocks.needEndBlock[dbactivityFB._blockIndex] =
        dbactivityFB._addedBlocks.retVal;
    return dbactivityFB;
  }
}
// endregion DbActivityField

// region DbActivityFilterBuilder
class DbActivityFilterBuilder extends SearchCriteria {
  DbActivityFilterBuilder(DbActivity obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  DbActivity _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  DbActivityFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  DbActivityFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  DbActivityFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  DbActivityFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  DbActivityFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  DbActivityFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  DbActivityFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  DbActivityFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  DbActivityFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  DbActivityFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  DbActivityField setField(
      DbActivityField field, String colName, DbType dbtype) {
    return DbActivityField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  DbActivityField _id;
  DbActivityField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  DbActivityField _state;
  DbActivityField get state {
    return _state = setField(_state, 'state', DbType.text);
  }

  DbActivityField _path;
  DbActivityField get path {
    return _path = setField(_path, 'path', DbType.text);
  }

  DbActivityField _stravaId;
  DbActivityField get stravaId {
    return _stravaId = setField(_stravaId, 'stravaId', DbType.integer);
  }

  DbActivityField _name;
  DbActivityField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  DbActivityField _movingTime;
  DbActivityField get movingTime {
    return _movingTime = setField(_movingTime, 'movingTime', DbType.integer);
  }

  DbActivityField _type;
  DbActivityField get type {
    return _type = setField(_type, 'type', DbType.text);
  }

  DbActivityField _startTime;
  DbActivityField get startTime {
    return _startTime = setField(_startTime, 'startTime', DbType.text);
  }

  DbActivityField _distance;
  DbActivityField get distance {
    return _distance = setField(_distance, 'distance', DbType.integer);
  }

  DbActivityField _athletesId;
  DbActivityField get athletesId {
    return _athletesId = setField(_athletesId, 'athletesId', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (DbActivity._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<DbActivity> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (DbActivity._softDeleteActivated && !hardDelete) {
      r = await _obj._mnDbActivity.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnDbActivity.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from activities ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnDbActivity.updateBatch(qparams, values);
  }

  /// This method always returns DbActivityObj if exist, otherwise returns null
  /// <returns>List<DbActivity>
  Future<DbActivity> toSingle([VoidCallback dbactivity(DbActivity o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnDbActivity.toList(qparams);
    final data = await objFuture;
    DbActivity obj;
    if (data.isNotEmpty) {
      obj = DbActivity.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    if (dbactivity != null) {
      dbactivity(obj);
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback dbactivityCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final dbactivitiesFuture = await _obj._mnDbActivity.toList(qparams);
    final int count = dbactivitiesFuture[0]['CNT'] as int;
    if (dbactivityCount != null) {
      dbactivityCount(count);
    }
    return count;
  }

  /// This method always returns List<DbActivity>.
  /// <returns>List<DbActivity>
  Future<List<DbActivity>> toList(
      [VoidCallback dbactivityList(List<DbActivity> o)]) async {
    final data = await toMapList();
    final List<DbActivity> dbactivitiesData =
        await DbActivity.fromMapList(data);
    if (dbactivityList != null) dbactivityList(dbactivitiesData);
    return dbactivitiesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnDbActivity.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<DbActivity>>
  Future<List<DropdownMenuItem<DbActivity>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<DbActivity>> o)]) async {
    _buildParameters();
    final dbactivitiesFuture = _obj._mnDbActivity.toList(qparams);

    final data = await dbactivitiesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<DbActivity>> items = List()
      ..add(DropdownMenuItem(
        value: DbActivity(),
        child: Text('Select DbActivity'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: DbActivity.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final dbactivitiesFuture = _obj._mnDbActivity.toList(qparams);

    final data = await dbactivitiesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select DbActivity'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnDbActivity.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnDbActivity.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await DbActivity.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnDbActivity.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion DbActivityFilterBuilder

// region DbActivityFields
class DbActivityFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fState;
  static TableField get state {
    return _fState =
        _fState ?? SqlSyntax.setField(_fState, 'state', DbType.text);
  }

  static TableField _fPath;
  static TableField get path {
    return _fPath = _fPath ?? SqlSyntax.setField(_fPath, 'path', DbType.text);
  }

  static TableField _fStravaId;
  static TableField get stravaId {
    return _fStravaId = _fStravaId ??
        SqlSyntax.setField(_fStravaId, 'stravaId', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fMovingTime;
  static TableField get movingTime {
    return _fMovingTime = _fMovingTime ??
        SqlSyntax.setField(_fMovingTime, 'movingTime', DbType.integer);
  }

  static TableField _fType;
  static TableField get type {
    return _fType = _fType ?? SqlSyntax.setField(_fType, 'type', DbType.text);
  }

  static TableField _fStartTime;
  static TableField get startTime {
    return _fStartTime = _fStartTime ??
        SqlSyntax.setField(_fStartTime, 'startTime', DbType.text);
  }

  static TableField _fDistance;
  static TableField get distance {
    return _fDistance = _fDistance ??
        SqlSyntax.setField(_fDistance, 'distance', DbType.integer);
  }

  static TableField _fAthletesId;
  static TableField get athletesId {
    return _fAthletesId = _fAthletesId ??
        SqlSyntax.setField(_fAthletesId, 'athletesId', DbType.integer);
  }
}
// endregion DbActivityFields

//region DbActivityManager
class DbActivityManager extends SqfEntityProvider {
  DbActivityManager()
      : super(DbEncrateia(), tableName: _tableName, colId: _colId);
  static String _tableName = 'activities';
  static String _colId = 'id';
}

//endregion DbActivityManager
class DbEncrateiaSequenceManager extends SqfEntityProvider {
  DbEncrateiaSequenceManager() : super(DbEncrateia());
}
// END OF ENTITIES
